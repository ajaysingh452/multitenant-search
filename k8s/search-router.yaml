apiVersion: v1
kind: ConfigMap
metadata:
  name: search-router-config
  namespace: search-system
data:
  config.yaml: |
    server:
      port: 3000
      host: "0.0.0.0"
      keepAliveTimeout: 5000
      requestTimeout: 30000
    
    engines:
      opensearch:
        node: "https://opensearch-cluster:9200"
        auth:
          username: "${OPENSEARCH_USERNAME}"
          password: "${OPENSEARCH_PASSWORD}"
        ssl:
          rejectUnauthorized: false
        requestTimeout: 10000
        maxRetries: 2
      
      typesense:
        nodes:
          - host: "typesense"
            port: 8108
            protocol: "http"
        apiKey: "${TYPESENSE_API_KEY}"
        connectionTimeoutSeconds: 5
        healthcheckIntervalSeconds: 30
    
    cache:
      l1:
        maxSize: 10000
        ttlMs: 300000  # 5 minutes
      l2:
        enabled: true
        host: "redis"
        port: 6379
        password: "${REDIS_PASSWORD}"
        db: 0
        maxRetriesPerRequest: 2
    
    tenancy:
      defaultStrategy: "shared"
      shardThreshold: 1000000  # Switch to dedicated index at 1M docs
      maxTenantsPerIndex: 100
    
    observability:
      tracing:
        enabled: true
        serviceName: "search-router"
        endpoint: "http://jaeger-collector:14268/api/traces"
      metrics:
        enabled: true
        prefix: "search_router"
        port: 9090
      logging:
        level: "info"
        structured: true

---
apiVersion: v1
kind: Secret
metadata:
  name: search-router-secrets
  namespace: search-system
type: Opaque
stringData:
  OPENSEARCH_USERNAME: "admin"
  OPENSEARCH_PASSWORD: "admin123"
  TYPESENSE_API_KEY: "xyz123"
  REDIS_PASSWORD: "redis123"
  JWT_SECRET: "your-jwt-secret-key"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-router
  namespace: search-system
  labels:
    app: search-router
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: search-router
  template:
    metadata:
      labels:
        app: search-router
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: search-router
      containers:
      - name: search-router
        image: search-router:latest
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: CONFIG_PATH
          value: "/etc/config/config.yaml"
        envFrom:
        - secretRef:
            name: search-router-secrets
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: search-router-config
      nodeSelector:
        node-type: compute
      tolerations:
      - key: "compute-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: search-router
  namespace: search-system
  labels:
    app: search-router
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: search-router

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: search-router-hpa
  namespace: search-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: search-router
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: search_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: search-router-pdb
  namespace: search-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: search-router

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: search-router
  namespace: search-system

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: search-router-netpol
  namespace: search-system
spec:
  podSelector:
    matchLabels:
      app: search-router
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-system
    - namespaceSelector:
        matchLabels:
          name: monitoring-system
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: search-system
    ports:
    - protocol: TCP
      port: 9200  # OpenSearch
    - protocol: TCP
      port: 8108  # Typesense
    - protocol: TCP
      port: 6379  # Redis
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 14268 # Jaeger